apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'kotlin-kapt'

android {
  compileSdkVersion rootProject.config.compileSdkVersion
  buildToolsVersion rootProject.config.buildToolsVersion
  defaultConfig {
    applicationId rootProject.config.applicationId
    minSdkVersion rootProject.config.minSdkVersion
    targetSdkVersion rootProject.config.targetSdkVersion
    versionCode Integer.parseInt(System.getenv('CIRCLE_BUILD_NUM') ?: "153")
    versionName rootProject.config.versionName
    testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    vectorDrawables {
      useSupportLibrary true
    }
  }

  signingConfigs {
    release {
      storeFile rootProject.file(System.getenv('KEYSTORE') ?: KEYSTORE)
      storePassword System.getenv('KEYSTORE_PASSWORD') ?: KEYSTORE_PASSWORD
      keyAlias System.getenv('KEY_ALIAS') ?: KEY_ALIAS
      keyPassword System.getenv('KEY_PASSWORD') ?: KEY_PASSWORD
    }
  }

  buildTypes {
    release {
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      signingConfig signingConfigs.release
      minifyEnabled false
    }
  }

  dataBinding {
    enabled true
  }

  compileOptions {
    targetCompatibility 1.8
    sourceCompatibility 1.8
  }

  dexOptions {
    preDexLibraries = Boolean.valueOf(System.getProperty('pre-dex', 'true'))
  }

  flavorDimensions 'foot'
  productFlavors {
    prod {}
  }

  // Always show the result of every unit test, even if it passes.
  testOptions {
    unitTests {
      all {
        testLogging {
          events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
      }
      returnDefaultValues = true
      includeAndroidResources = true
    }
  }

  lintOptions {
    warning 'InvalidPackage' // prevent error from references of non-Android package
  }

  sourceSets {
    androidTest.java.srcDirs += 'src/androidTest/kotlin'
  }
}

androidExtensions {
  experimental = true
}

dependencies {
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
  implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.lib.archComponentsVersion"
  kapt "androidx.lifecycle:lifecycle-compiler:$rootProject.lib.archComponentsVersion"
  implementation "androidx.appcompat:appcompat:$rootProject.lib.appCompatVersion"
  implementation "androidx.annotation:annotation:$rootProject.lib.supportLibraryVersion"
  implementation "com.google.android.material:material:$rootProject.lib.supportLibraryVersion"
  implementation "androidx.recyclerview:recyclerview:$rootProject.lib.supportLibraryVersion"
  implementation "com.google.android.material:material:$rootProject.lib.supportLibraryVersion"
  implementation "androidx.legacy:legacy-support-v4:$rootProject.lib.supportLibraryVersion"
  implementation "androidx.cardview:cardview:$rootProject.lib.supportLibraryVersion"
  implementation "androidx.constraintlayout:constraintlayout:$rootProject.lib.constraintLayoutVersion"
  implementation "com.jakewharton.timber:timber:$rootProject.lib.timberVersion"
  implementation "io.reactivex.rxjava2:rxjava:$rootProject.lib.rxJavaVersion"
  implementation "io.reactivex.rxjava2:rxkotlin:$rootProject.lib.rxKotlinVersion"
  implementation "io.reactivex.rxjava2:rxandroid:$rootProject.lib.rxAndroidVersion"
  implementation "com.squareup.picasso3:picasso:$rootProject.lib.picassoVersion"
  implementation "com.jakewharton.picasso:picasso2-okhttp3-downloader:$rootProject.lib.picassoOkHttp3DownloaderVersion"
  implementation "com.squareup.okhttp3:okhttp:$rootProject.lib.okHttpVersion"
  implementation "com.squareup.okhttp3:logging-interceptor:$rootProject.lib.okHttpVersion"
  implementation "com.squareup.retrofit2:retrofit:$rootProject.lib.retrofitVersion"
  implementation "com.squareup.retrofit2:converter-moshi:$rootProject.lib.retrofitVersion"
  implementation "com.squareup.retrofit2:adapter-rxjava2:$rootProject.lib.retrofitVersion"
  implementation "com.squareup.moshi:moshi:$rootProject.lib.moshiVersion"
  implementation "com.squareup.moshi:moshi-adapters:$rootProject.lib.moshiVersion"
  kapt "com.squareup.moshi:moshi-kotlin-codegen:$rootProject.lib.moshiVersion"
  implementation "com.jakewharton.rxbinding2:rxbinding:$rootProject.lib.rxBindingVersion"
  implementation "com.jakewharton.rxbinding2:rxbinding-recyclerview-v7:$rootProject.lib.rxBindingVersion"
  implementation "com.jakewharton.rxbinding2:rxbinding-appcompat-v7:$rootProject.lib.rxBindingVersion"
  implementation "com.jakewharton.rxbinding2:rxbinding-support-v4:$rootProject.lib.rxBindingVersion"
  implementation "com.benoitquenaudon:rxdatabinding:$rootProject.lib.rxDataBindingVersion"
  debugImplementation "com.squareup.leakcanary:leakcanary-android:$rootProject.lib.leakCanaryVersion"
  releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.lib.leakCanaryVersion"
  kapt "androidx.databinding:databinding-compiler:$android_plugin_version"
  implementation "com.google.dagger:dagger-android:$rootProject.lib.daggerVersion"
  implementation "com.google.dagger:dagger-android-support:$rootProject.lib.daggerVersion"
  implementation "com.google.dagger:dagger:$rootProject.lib.daggerVersion"
  kapt "com.google.dagger:dagger-android-processor:$rootProject.lib.daggerVersion"
  kapt "com.google.dagger:dagger-compiler:$rootProject.lib.daggerVersion"
  implementation "androidx.core:core-ktx:$rootProject.lib.ktxVersion"

  // JVM Tests
  testImplementation "junit:junit:$rootProject.lib.junitVersion"
  testImplementation "com.squareup.okhttp3:mockwebserver:$rootProject.lib.okHttpVersion"
  testImplementation "org.mockito:mockito-core:$rootProject.lib.mockitoVersion"
  testImplementation "com.squareup.retrofit2:retrofit-mock:$rootProject.lib.retrofitVersion"
  kaptTest "com.google.dagger:dagger-compiler:$rootProject.lib.daggerVersion"

  androidTestImplementation "androidx.test.espresso:espresso-contrib:$rootProject.lib.espressoVersion"
  androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.lib.espressoVersion"
  kaptAndroidTest "com.google.dagger:dagger-compiler:$rootProject.lib.daggerVersion"
}

/*
Resolves dependency versions across test and production APKs, specifically, transitive
dependencies. This is required since Espresso internally has a dependency on support-annotations.
*/
configurations.all {
  resolutionStrategy.force "com.google.code.findbugs:jsr305:$rootProject.lib.jsr305Version"

  resolutionStrategy {
    eachDependency { details ->
      // Force all of the primary support libraries to use the same version.
      if (details.requested.group == 'com.android.support') {
        details.useVersion rootProject.lib.supportLibraryVersion
      }
    }
  }
}
