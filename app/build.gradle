apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'kotlin-kapt'
// https://github.com/google/error-prone/issues/676
// apply plugin: 'net.ltgt.errorprone'
apply plugin: 'com.google.firebase.firebase-perf'

android {
  compileSdkVersion rootProject.config.compileSdkVersion
  buildToolsVersion rootProject.config.buildToolsVersion
  defaultConfig {
    applicationId rootProject.config.applicationId
    minSdkVersion rootProject.config.minSdkVersion
    targetSdkVersion rootProject.config.targetSdkVersion
    versionCode Integer.parseInt(System.getenv('CIRCLE_BUILD_NUM') ?: "153")
    versionName '1.0'
    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    vectorDrawables {
      useSupportLibrary true
    }
  }

  signingConfigs {
    release {
      storeFile rootProject.file(System.getenv('KEYSTORE') ?: KEYSTORE)
      storePassword System.getenv('KEYSTORE_PASSWORD') ?: KEYSTORE_PASSWORD
      keyAlias System.getenv('KEY_ALIAS') ?: KEY_ALIAS
      keyPassword System.getenv('KEY_PASSWORD') ?: KEY_PASSWORD
    }
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      signingConfig signingConfigs.release
    }
  }

  dataBinding {
    enabled true
  }

  compileOptions {
    targetCompatibility 1.8
    sourceCompatibility 1.8
  }

  dexOptions {
    preDexLibraries = Boolean.valueOf(System.getProperty('pre-dex', 'true'))
  }

  flavorDimensions 'foot'
  productFlavors {
    mock {
      applicationIdSuffix = ".mock"
    }
    prod {}
  }

  // Remove mockRelease as it's not needed.
  android.variantFilter { variant ->
    if (variant.buildType.name == 'release' && variant.getFlavors().
        get(0).name == 'mock') {
      variant.setIgnore(true);
    }
  }

  // Always show the result of every unit test, even if it passes.
  testOptions {
    unitTests {
      all {
        testLogging {
          events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
      }
      returnDefaultValues = true
      includeAndroidResources = true
    }
  }

  lintOptions {
    warning 'InvalidPackage' // prevent error from references of non-Android package
  }
}

android.applicationVariants.all {
  // Set this to false to disable Firebase Performance Monitoring at compile time
  FirebasePerformance {
    instrumentationEnabled true
  }
}

dependencies {
  implementation "com.android.support:appcompat-v7:$rootProject.lib.supportLibraryVersion"
  implementation "com.android.support:support-annotations:$rootProject.lib.supportLibraryVersion"
  implementation "com.android.support:design:$rootProject.lib.supportLibraryVersion"
  implementation "com.android.support:recyclerview-v7:$rootProject.lib.supportLibraryVersion"
  implementation "com.android.support:design:$rootProject.lib.supportLibraryVersion"
  implementation "com.android.support:support-v4:$rootProject.lib.supportLibraryVersion"
  implementation "com.android.support:cardview-v7:$rootProject.lib.supportLibraryVersion"
  implementation "com.android.support.constraint:constraint-layout:$rootProject.lib.constraintLayoutVersion"
  implementation "com.jakewharton.timber:timber:$rootProject.lib.timberVersion"
  implementation "io.reactivex.rxjava2:rxjava:$rootProject.lib.rxJavaVersion"
  implementation "io.reactivex.rxjava2:rxandroid:$rootProject.lib.rxAndroidVersion"
  implementation "com.squareup.picasso:picasso:$rootProject.lib.picassoVersion"
  implementation "com.jakewharton.picasso:picasso2-okhttp3-downloader:$rootProject.lib.picassoOkHttp3DownloaderVersion"
  implementation "com.squareup.okhttp3:okhttp:$rootProject.lib.okHttpVersion"
  implementation "com.squareup.okhttp3:logging-interceptor:$rootProject.lib.okHttpVersion"
  implementation "com.squareup.retrofit2:retrofit:$rootProject.lib.retrofitVersion"
  implementation "com.squareup.retrofit2:converter-moshi:$rootProject.lib.retrofitVersion"
  implementation "com.squareup.retrofit2:adapter-rxjava2:$rootProject.lib.retrofitVersion"
  implementation "com.squareup.moshi:moshi:$rootProject.lib.moshiVersion"
  implementation "com.squareup.moshi:moshi-adapters:$rootProject.lib.moshiVersion"
  implementation "com.google.dagger:dagger:$rootProject.lib.daggerVersion"
  implementation "com.google.firebase:firebase-core:$rootProject.lib.firebaseVersion"
  implementation "com.google.firebase:firebase-perf:$rootProject.lib.firebaseVersion"
  // Only use crash reporting in the "prod" product flavor
  prodImplementation "com.google.firebase:firebase-crash:$rootProject.lib.firebaseVersion"
  implementation "com.jakewharton.rxbinding2:rxbinding:$rootProject.lib.rxBindingVersion"
  implementation "com.jakewharton.rxbinding2:rxbinding-recyclerview-v7:$rootProject.lib.rxBindingVersion"
  implementation "com.jakewharton.rxbinding2:rxbinding-support-v4:$rootProject.lib.rxBindingVersion"
  implementation 'com.benoitquenaudon:rxdatabinding:2.0.0'
  debugImplementation "com.squareup.leakcanary:leakcanary-android:$rootProject.lib.leakCanaryVersion"
  releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.lib.leakCanaryVersion"
  annotationProcessor "com.google.auto.value:auto-value:$rootProject.lib.autoValueVersion"
  kapt "com.android.databinding:compiler:3.0.0-alpha9"
  kapt "com.google.dagger:dagger-compiler:$rootProject.lib.daggerVersion"
  kapt "com.ryanharter.auto.value:auto-value-parcel:$rootProject.lib.autoValueParcelVersion"
  compileOnly "com.google.code.findbugs:jsr305:$rootProject.lib.jsr305Version"
  compileOnly "com.google.auto.value:auto-value:$rootProject.lib.autoValueVersion"
  implementation 'se.ansman.kotshi:api:0.1.1'
  kapt 'se.ansman.kotshi:compiler:0.1.1'

  // JVM Tests
  testImplementation "junit:junit:$rootProject.lib.junitVersion"
  testImplementation "com.squareup.okhttp3:mockwebserver:$rootProject.lib.okHttpVersion"
  testImplementation "org.mockito:mockito-core:$rootProject.lib.mockitoVersion"
  testImplementation "com.squareup.retrofit2:retrofit-mock:$rootProject.lib.retrofitVersion"
  testImplementation "com.google.dagger:dagger:$rootProject.lib.daggerVersion"
  testImplementation "org.robolectric:robolectric:$rootProject.lib.robolectricVersion"
  kaptTest "com.google.dagger:dagger-compiler:$rootProject.lib.daggerVersion"

  androidTestImplementation "com.android.support.test.espresso:espresso-contrib:$rootProject.lib.espressoVersion"
  androidTestImplementation "com.android.support.test.espresso:espresso-core:$rootProject.lib.espressoVersion"
  androidTestImplementation "org.mockito:mockito-core:$rootProject.lib.mockitoVersion"
  androidTestImplementation "com.crittercism.dexmaker:dexmaker:$rootProject.lib.dexmakerVersion"
  androidTestImplementation "com.crittercism.dexmaker:dexmaker-mockito:$rootProject.lib.dexmakerVersion"
  androidTestImplementation "com.crittercism.dexmaker:dexmaker-dx:$rootProject.lib.dexmakerVersion"
  androidTestImplementation "com.squareup.okhttp3:mockwebserver:$rootProject.lib.okHttpVersion"
  androidTestImplementation "com.squareup.retrofit2:retrofit-mock:$rootProject.lib.retrofitVersion"
  androidTestImplementation 'com.jakewharton.espresso:okhttp3-idling-resource:1.0.0'
  androidTestImplementation "com.google.dagger:dagger:$rootProject.lib.daggerVersion"
  androidTestAnnotationProcessor "com.google.dagger:dagger-compiler:$rootProject.lib.daggerVersion"
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
  implementation 'com.android.support.constraint:constraint-layout:1.0.2'
}

/*
Resolves dependency versions across test and production APKs, specifically, transitive
dependencies. This is required since Espresso internally has a dependency on support-annotations.
*/
configurations.all {
  resolutionStrategy.force "com.android.support:support-annotations:$rootProject.lib.supportLibraryVersion"
  resolutionStrategy.force "com.google.code.findbugs:jsr305:$rootProject.lib.jsr305Version"
}

/*
All direct/transitive dependencies shared between your test and production APKs need to be
excluded from the test APK! This is necessary because both APKs will contain the same classes. Not
excluding these dependencies from your test configuration will result in an dex pre-verifier error
at runtime. More info in this tools bug: (https://code.google.com/p/android/issues/detail?id=192497)
*/
configurations.implementation.dependencies.each { implementationDependency ->
  println "Excluding implementation dependency: ${implementationDependency.getName()}"
  configurations.androidTestImplementation.dependencies.each {
    androidTestImplementationDependency ->
      configurations.androidTestImplementation.exclude module: "${implementationDependency.getName()}"
  }
}

apply plugin: 'com.google.gms.google-services'
repositories {
  mavenCentral()
}

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'